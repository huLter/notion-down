version: 2.1

orbs:
  python: circleci/python@1.2

workflows:
  test-build-md:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-readme:
          branch_build: ci/build-readme
          filters:
            branches:
              only: ci/build-readme
      - publish-github-readme:
          branch_deploy: deploy/readme
          requires:
            - build-readme
          filters:
            branches:
              only: ci/build-readme

  test-run-pycorrector:
    jobs:
      - build-pycorrector-test:
          branch_build: feature/spell-inspect
          filters:
            branches:
              only: feature/spell-inspect

jobs:
  build-readme:
    parameters:
      branch_build:
        type: string
        default: master
    working_directory: ~/project
    docker:
      - image: cimg/python:3.8
    steps:
      - attach_workspace:
            at: ~/project
      - checkout
      - run:
          name: pip install
          command: |
              pip install notion
              pip install pangu
      - run:
          name: Run tests
          command: |
              python -m unittest test.notion_ci_test.NotionCiTest.test_generate_read_me 
      - run:
          name: Dump outputs
          command: |
              echo "Generated MD file:\n" | 
              cat "$(find ~/project/build -name "*.md" -type f | head -1)"
              echo "\n---\n"
              pwd && ls -l
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./build


  publish-github-readme:
      parameters:
        branch_deploy:
          type: string
          default: master
      working_directory: ~/dist
      docker:
        - image: cibuilds/github:0.10
      steps:
        - attach_workspace:
            at: ~/project
        - checkout
        - run: git checkout << parameters.branch_deploy >>
        # - run: git submodule sync
        # - run: git submodule update --init
        - run:
            name: "Dump files"
            command: |
              pwd && ls -l ~/project
              echo "n--n"

              # find ~/project/build -name "*.md" -type f | head -1 | xargs -n1 sh -c "echo mv $0 $1 ~/dist/README.md"
              echo "mv $(find ~/project/build -name "*.md" -type f | head -1) ~/dist/README.md"
              mv $(find ~/project/build -name "*.md" -type f | head -1) ~/dist/README.md
              cat ~/dist/README.md
        - run:
            name: "Push"
            command: |
              pwd
              echo "\n--\n"

              # git ls-files -m
              # has_modified=$(git ls-files -m)

              # git diff HEAD --name-only --diff-filter=ACMR --ignore-space-at-eol -M100%
              has_modified="$(git diff HEAD --name-only --diff-filter=ACMR --ignore-space-at-eol -M100%)"

              if [ -z "$has_modified" ] ; then
                  echo "not modified"
              else
                  echo "has modified, try git push"
                  git config user.name "Kaede"
                  git config user.email "kidhaibara@gmail.com"
                  # git pull origin << parameters.branch_deploy >>
                  git add *
                  git status
                  git commit -a -m "Update README via CircleciBot - ${CIRCLE_BUILD_NUM}"
                  git status
                  git push --quiet "https://${GH_TOKEN}@github.com/kaedea/notion-down.git" << parameters.branch_deploy >>:<< parameters.branch_deploy >>
              fi


  build-pycorrector-test:
    parameters:
      branch_build:
        type: string
        default: feature/spell-inspect
    working_directory: ~/spell-inspect
    docker:
      - image: cimg/python:3.8
    steps:
      - attach_workspace:
            at: ~/spell-inspect
      - checkout
      - run:
          name: pip install
          command: |
              pip install notion
              pip install pangu
              pip install pycorrector
              pip install https://github.com/kpu/kenlm/archive/master.zip
              # pip install -r requirements.txt
      - run:
          name: Run tests
          command: |
              python -m unittest test.corrects_test.CorrectsApiTest.test_pycorrector_spelling_inspect_writer_r2

      - store_artifacts:
          path: ~/spell-inspect/build/SpellInspect
